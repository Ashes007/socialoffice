<?php

namespace App\Http\Controllers\front;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Ixudra\Curl\Facades\Curl;
use Illuminate\Support\Facades\Input;
use Image;
use File;

use App\Department;
use App\DepartmentTranslation;
use App\Company;
use App\CompanyTranslation;
use App\GroupType;
use App\GroupUser;
use App\GroupTypeTranslation;
use App\Designation;
use App\DesignationTranslation;
use App\Feed;
use App\Post;

use App\EventInvite;
use App\GroupInvite;
use App\UserGroupUser;
use App\GroupUserModerator;
use App\Notification, App\User, App\Event;
 

class HomeController extends Controller
{
    public function index(Request $request)
    {  
    
        //$data['feeds'] = Feed::orderBy('id','desc')->get();
        $feeds= Feed::where(function($queryset){
            $queryset->where(function($query){
                $query->where('type','Event')
                ->wherehas('event', function($q){
                    $q->where('status','Active');
                });
            })
            ->OrWhere(function($query){
                $query->where('type','Group')
                ->wherehas('group', function($q){
                    $q->where('status','Active');
                });
            })
            ->OrWhere('type','Post');            
        })
        ->orderBy('id','desc')->paginate(10);
        $data['feeds'] = $feeds;

        

        $data['today'] = date('Y-m-d');
        $feds = array();
        if(!empty($data['feeds'])){
            foreach($data['feeds'] as $feeds){
                if($feeds->type=='Group') {                   
                    $feed = $feeds->group;
                    if(count($feed)){
                        if($feed->group_type_id==1 && $feed->status=='Active'){
                        if(file_exists( public_path('uploads/group_images/'.$feed->cover_image) )&& ($feed->cover_image!='' || $feed->cover_image!=NULL)) {
                        $fed['image'] ='uploads/group_images/'.'/'.$feed->cover_image ;
                        }else{ 
                        $fed['image'] ='frontend/images/no-image-event-details.jpg';
                        }    
                        
                        if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                          }
                        $fed['user_id']= $feed->user->ad_username;  
                        $fed['user_name'] =  $feed->user->display_name;
                         $group_id = base64_encode($feed->group_user_id+ 100);   
                        $fed['text'] = ' created new group ';
                        $fed['textlink'] = $feed->group_name;
                        $fed['url'] =Route('group_details').'/'.$group_id;
                        $fed['created_at'] = $feed->created_at;
                        $feds[]=$fed;
                        }
                    }
                }
                elseif($feeds->type=='Event') {                   
                    $feed = $feeds->event;
                    if(count($feed)){
                        if($feed->type_id==1){
                        if(count($feed->eventImage) && file_exists(public_path('uploads/event_images/original/'.$feed->eventImage[0]->image_name))) {
                        $fed['image'] =  'uploads/event_images/original/'.$feed->eventImage[0]->image_name;
                        }
                        else{
                        $fed['image'] =  'frontend/images/no-image-event-home.jpg';
                        }
                        if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                          } 
                        $fed['user_id']= $feed->user->ad_username;  
                        $fed['user_name'] =  $feed->user->display_name;      
                        $fed['text'] = ' created new event ';
                        $fed['textlink'] = $feed->name;
                        $fed['url'] =route('event_details', encrypt($feed->id));
                        $fed['created_at'] = $feed->created_at;
                        $feds[]=$fed;
                        }
                    }
                }
                elseif($feeds->type=='Post'){
                    $feed = $feeds->post;
                    if(count($feed)){
                       // echo ($feed->group_id).'@@' ;
                        $type_ids=GroupUser::where('id',$feed->group_id)->first(); 
                        //dd($type_ids);
                       // echo $type_ids['group_type_id'].'@@';
                        if( $type_ids['group_type_id']==1){
                        if($feed->image != NULL && file_exists(public_path('uploads/post_images/' .$feed->image))){
                    
                        $fed['image'] =  'uploads/post_images/'.$feed->image;
                        }
                        else{
                        $fed['image'] =  'frontend/images/no-image-event-home.jpg';
                        }
                        if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                          }
                        $fed['user_id']= $feed->user->ad_username;  
                        $fed['user_name'] =  $feed->user->display_name;  
                        $group_id = base64_encode($feed->group_id+ 100);  
                        $fed['text'] = ' Posted in ';
                        $fed['textlink'] = $type_ids->group_name;
                        $fed['url'] =Route('group_details').'/'.$group_id;;
                        $fed['created_at'] = $feed->created_at;
                        $feds[]=$fed;
                        }

                    }
                }
            }
        }
       
        $ord = array();
        foreach ($feds as $key => $res)
        {       
            $ord[$key] = $res['created_at'];       
        }
        array_multisort($ord, SORT_DESC, $feds);      
        
        //dd($feds);
        $data['recent_updates'] = array_slice($feds,0,4);
        //dd($data['recent_updates']);
        //exit;
        $user_id = \Auth::guard('user')->user()->id;
        $data['isInvited'] = EventInvite::where('user_id', '=',$user_id)->count();
        $data['loggedin_user'] = $user_id;

        $data['events'] = Event::orderBy('id','desc')->where('status','Active')->get();
        $data['mygroups'] = GroupUser::from('user_group_users as ugu') 
                            ->leftJoin('group_users as grpuser','ugu.group_id', '=','grpuser.id' )
                            ->where('grpuser.status','Active')
                            ->where('ugu.user_id',$user_id)->orderBy('grpuser.id','desc')->limit(3)->get();

        $data['mygroupall'] = GroupUser::from('user_group_users as ugu') 
                            ->leftJoin('group_users as grpuser','ugu.group_id', '=','grpuser.id' )
                            ->where('grpuser.status','Active')
                            ->where('ugu.user_id',$user_id)->orderBy('grpuser.id','desc')->get();  


        if ($request->ajax()) { 

            return view('front.home-data',$data);
            //$view = view('front.groups.data_group',$data)->render();
            //return response()->json(['html'=>$view]);
        }
        //print_r($data);
        $data['feeds'] = [];                    
    	return view('front.home',$data);
    }

    //========================= recent updates secton =====================================//
    public function recent_updates()
    { 
        $user_id = \Auth::guard('user')->user()->id;       
        $data['feeds'] = Feed::orderBy('id','desc')->get();
        $feds = array();
        if(!empty($data['feeds'])){
            foreach($data['feeds'] as $feeds){
                if($feeds->type=='Group') {                   
                    $feed = $feeds->group;
                    if(count($feed)){
                        if($feed->group_type_id==1 && $feed->status=='Active'){
                        if(file_exists( public_path('uploads/group_images/'.$feed->cover_image) )&& ($feed->cover_image!='' || $feed->cover_image!=NULL)) {
                        $fed['image'] ='uploads/group_images/'.'/'.$feed->cover_image ;
                        }else{ 
                        $fed['image'] ='frontend/images/no-image-event-details.jpg';
                        }   

                         if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                          }

                        $fed['user_id']= $feed->user->ad_username;  
                        $fed['user_name'] =  $feed->user->display_name;  
                        $group_id = base64_encode($feed->group_user_id+ 100);    
                       
                        $fed['text'] = ' created new group ';
                        $fed['textlink'] = $feed->group_name;                        
                        $fed['created_at'] = $feed->created_at;
                        $fed['url'] =Route('group_details').'/'.$group_id;
                        $feds[]=$fed;
                        }
                    }
                }
                elseif($feeds->type=='Event') {                   
                    $feed = $feeds->event;
                    if(count($feed)){
                        if($feed->type_id==1){
                        if(count($feed->eventImage) && file_exists(public_path('uploads/event_images/original/'.$feed->eventImage[0]->image_name))) {
                        $fed['image'] =  'uploads/event_images/original/'.$feed->eventImage[0]->image_name;
                        }
                        else{
                        $fed['image'] =  'frontend/images/no-image-event-home.jpg';
                        }
                          
                        if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                        }

                        $fed['user_id']= $feed->user->ad_username;
                        $fed['user_name'] =  $feed->user->display_name;

                        $fed['text'] = ' created new event ';
                        $fed['textlink'] = $feed->name;
                        
                        $fed['created_at'] = $feed->created_at;
                        $fed['url'] =route('event_details', encrypt($feed->id));
                        $feds[]=$fed;
                        }
                    }
                }
                elseif($feeds->type=='Post'){
                    $feed = $feeds->post;
                    if(count($feed)){
                        //echo ($feed->group_id).'@@' ;
                        $type_ids=GroupUser::where('id',$feed->group_id)->first(); 
                        //dd($type_ids);
                        if( $type_ids['group_type_id']==1){
                        if($feed->image != NULL && file_exists(public_path('uploads/post_images/' .$feed->image))){
                    
                        $fed['image'] =  'uploads/post_images/'.$feed->image;
                        }
                        else{
                        $fed['image'] =  '';
                        }
                         if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                          }

                        $fed['user_id']= $feed->user->ad_username;  
                        $fed['user_name'] =  $feed->user->display_name;
                         
                        $fed['text'] = ' Posted in ';
                        $fed['textlink'] = $type_ids->group_name;
                        $group_id = base64_encode($feed->group_id+ 100);
                        $fed['created_at'] = $feed->created_at;
                         $fed['url'] =Route('group_details').'/'.$group_id;
                        $feds[]=$fed;
                        }


                    }
                }
            }
        }
        //print_r($feds);die;
         //dd($feds);die;
        $ord = array();
        foreach ($feds as $key => $res)
        {       
            $ord[$key] = $res['created_at'];       
        }
        array_multisort($ord, SORT_DESC, $feds); 
        $data['recent_updates'] = array_slice($feds,0,4);
        $data['recent_updates_all'] = $feds;
        $data['mygroups'] = GroupUser::from('user_group_users as ugu') 
                            ->leftJoin('group_users as grpuser','ugu.group_id', '=','grpuser.id' )
                            ->where('grpuser.status','Active')
                            ->where('ugu.user_id',$user_id)->orderBy('grpuser.id','desc')->limit(3)->get();
        return view('front.recent-updates',$data);
    }
     public function recent_notifications()
    {
        $data=array();
         $data['feeds'] = Feed::orderBy('id','desc')->get();
        $feds = array();
        if(!empty($data['feeds'])){
            foreach($data['feeds'] as $feeds){
                if($feeds->type=='Group') {                   
                    $feed = $feeds->group;
                    if(count($feed)){
                        if($feed->group_type_id==1 && $feed->status=='Active'){
                        if(file_exists( public_path('uploads/group_images/'.$feed->cover_image) )&& ($feed->cover_image!='' || $feed->cover_image!=NULL)) {
                        $fed['image'] ='uploads/group_images/'.'/'.$feed->cover_image ;
                        }else{ 
                        $fed['image'] ='frontend/images/no-image-event-details.jpg';
                        }   
                         if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                          }
                        $fed['user_id']= $feed->user->ad_username;   
                        $fed['user_name'] =  $feed->user->display_name;  
                        $group_id = base64_encode($feed->group_user_id+ 100);    
                        $fed['text'] = ' created new group ';
                        $fed['textlink'] = $feed->group_name;                        
                        $fed['created_at'] = $feed->created_at;
                        $fed['url'] =Route('group_details').'/'.$group_id;
                        $feds[]=$fed;
                        }
                    }
                }
                elseif($feeds->type=='Event') {                   
                    $feed = $feeds->event;
                    if(count($feed)){
                        if($feed->type_id==1){
                        if(count($feed->eventImage) && file_exists(public_path('uploads/event_images/original/'.$feed->eventImage[0]->image_name))) {
                        $fed['image'] =  'uploads/event_images/original/'.$feed->eventImage[0]->image_name;
                        }
                        else{
                        $fed['image'] =  'frontend/images/no-image-event-home.jpg';
                        }
                         if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                          }
                       $fed['user_name'] =  $feed->user->display_name;   
                        $fed['user_id']= $feed->user->ad_username;      
                        $fed['text'] = ' created new event ';
                        $fed['textlink'] = $feed->name;
                        
                        $fed['created_at'] = $feed->created_at;
                        $fed['url'] =route('event_details', encrypt($feed->id));
                        $feds[]=$fed;
                        }
                    }
                }
                elseif($feeds->type=='Post'){
                    $feed = $feeds->post;
                    if(count($feed)){
                        //echo ($feed->group_id).'@@' ;
                        $type_ids=GroupUser::where('id',$feed->group_id)->first(); 
                        //dd($type_ids);
                        if( $type_ids['group_type_id']==1){
                        if($feed->image != NULL && file_exists(public_path('uploads/post_images/' .$feed->image))){
                    
                        $fed['image'] =  'uploads/post_images/'.$feed->image;
                        }
                        else{
                        $fed['image'] =  '';
                        }
                         if($feed->user->profile_photo != NULL && file_exists(public_path('uploads/user_images/profile_photo/thumbnails/' . $feed->user->profile_photo))){
                            $fed['userimage']='uploads/user_images/profile_photo/thumbnails/'.$feed->user->profile_photo;
                        }else{
                            $fed['userimage']='frontend/images/no_user_thumb.png';
                          }
                          $fed['user_id']= $feed->user->ad_username;
                          $fed['user_name'] =  $feed->user->display_name;
                          $group_id = base64_encode($feed->group_id+ 100);    
                          $fed['text'] = ' Posted in ';
                          $fed['textlink'] = $type_ids->group_name;
                        
                          $fed['created_at'] = $feed->created_at;
                          $fed['url'] =Route('group_details').'/'.$group_id;;
                          $feds[]=$fed;
                        }


                    }
                }
            }
        }
        //print_r($feds);die;
        $ord = array();
        foreach ($feds as $key => $res)
        {       
            $ord[$key] = $res['created_at'];       
        }
        array_multisort($ord, SORT_DESC, $feds); 
        $data['recent_updates'] = array_slice($feds,0,4);
        $user_id=\Auth::guard('user')->user()->id;
         $data['mygroups'] = GroupUser::from('user_group_users as ugu') 
                            ->leftJoin('group_users as grpuser','ugu.group_id', '=','grpuser.id' )
                            ->where('grpuser.status','Active')
                            ->where('ugu.user_id',$user_id)->orderBy('grpuser.id','desc')->limit(3)->get();
        $data['header_notifications'] = Notification::where('user_id',$user_id)->orderBy('id','Desc')->get();
        return view('front.notifications',$data);
    }

    //================== accept member request       ==========================//

    public function accept_member_request(Request $request){
        $notification_id= $request->notification_id; 
        $invite = Notification::where('id', $notification_id)->first();
        //dd($invite);
        $usergroupusr = new UserGroupUser;
        $usergroupusr->user_id  = $invite->user_id;
        $usergroupusr->group_id = $invite->notificationable_id;
        $usergroupusr->save(); 
        GroupInvite::where('notification_id', $notification_id)->delete();
        Notification::where('id', $notification_id)->update(['accept_status' => 1]);

        return 1;
    }

    public function reject_member_request(Request $request){
        $notification_id= $request->notification_id; 
        GroupInvite::where('notification_id', $notification_id)->delete();
        Notification::where('id', $notification_id)->update(['accept_status' => 2]);
        return 1;
    }

    //=============== accept moderator =================//
    public function accept_moderator_request(Request $request){
        $notification_id= $request->notification_id; 
        $invite = Notification::where('id', $notification_id)->first();
        //dd($invite);
        $moderator_grp = new GroupUserModerator;
        $moderator_grp->group_id = $invite->notificationable_id;
        $moderator_grp->user_id  = $invite->user_id;
        $moderator_grp->save();
        
        Notification::where('id', $notification_id)->update(['accept_status' => 1]);

        return 1;
    }

    public function reject_moderator_request(Request $request){
        $notification_id= $request->notification_id; 
        GroupInvite::where('notification_id', $notification_id)->delete();
        Notification::where('id', $notification_id)->update(['accept_status' => 2]);
        return 1;
    }
    

    //--------------------------------------- post add --------------------------------///

    public function post_home(Request $request){

        
        $user_id = \Auth::guard('user')->user()->id;
        $groupids = $request->groupids;
       
        if(!empty($groupids)){
        foreach ($groupids as $key => $group_id) { 
            $post = new Post;
            if(Input::hasFile('post_image')) {
                $image = $request->file('post_image');                        
               
                $imagename = mt_rand(1000,9999)."_".time().".".$image->getClientOriginalExtension();

                $destinationPath = public_path('uploads/post_images');
                $thumbPath = public_path('uploads/post_images/thumb');
                

                $img = Image::make($image->getRealPath());
                $img->resize(350, null, function ($constraint) {
                    $constraint->aspectRatio();
                })->save($thumbPath.'/'.$imagename);  
                 $img = Image::make($image->getRealPath());
                 $img->save($destinationPath.'/'.$imagename);  
                $post->image = $imagename;
               
            }

            $location= $request->location;
            $post->user_id = $user_id;
            $post->text    = $request->post_text;
            $post->location    = "$location";
            $post->type    = 'Group';
            $post->group_id = $group_id;
            $post->save();

            $feed = new Feed;
            $feed->user_id = $user_id;
            $feed->feedable_id = $post->id;
            $feed->type =  'Post';
            $feed->save();

        }


        }
        return 1;
    }

    /////////////******************* Insert data from Api *******************************////////////

    public function saveDepartment()
    {
    	$response = Curl::to('http://api.dev.tawasul.shurooq.gov.ae/api/departments')
                        ->withData( array( 'key' => 'ADF767DGH' ) )
                        ->asJson()
                         ->get();
    

        foreach ($response as $key => $res) {
        	$departmentName  = $res->Department;
        
        	$departmentDetails = DepartmentTranslation::where('name', $departmentName )->get();

            if($departmentDetails->count() == 0)
            {
                $department        = new Department;
                

                $department->status = 'Active';
                $department->save();
                $department_id = $department->id;

                foreach ($this->lang_locales as $locale) {
                    $departmentDetails = new DepartmentTranslation;
                    $departmentDetails->department_id = $department->id;
                    $departmentDetails->locale = $locale->code;
                    $departmentDetails->name = $departmentName;
                    $departmentDetails->save();
                }
                                
            }
        }

    }

    public function saveCompany()
    {
    	$response = Curl::to('http://api.dev.tawasul.shurooq.gov.ae/api/companies')
                        ->withData( array( 'key' => 'ADF767DGH' ) )
                        ->asJson()
                         ->get();
    

        foreach ($response as $key => $res) {
        	$companyName     = $res->Company;
        
        	$CompanyDetails = CompanyTranslation::where('name', $companyName )->get();

            if($CompanyDetails->count() == 0)
            {
                $company        = new Company;            

                $company->status = 'Active';
                $company->save();
                $company_id = $company->id;

                foreach ($this->lang_locales as $locale) {
                    $CompanyDetails = new CompanyTranslation;
                    $CompanyDetails->company_id = $company->id;
                    $CompanyDetails->locale = $locale->code;
                    $CompanyDetails->name = $companyName;
                    $CompanyDetails->save();
                }
                
                
            }
        }

    }

    public function saveGroup()
    {
    	$response = Curl::to('http://api.dev.tawasul.shurooq.gov.ae/api/groups')
                        ->withData( array( 'key' => 'ADF767DGH' ) )
                        ->asJson()
                         ->get();
    

        foreach ($response as $key => $res) {
        	$groupName       = $res->Group;
        
        	$grouptypeDetails = GroupTypeTranslation::where('name', $groupName )->get();

            if($grouptypeDetails->count() == 0)
            {
               
                $grouptype        = new GroupType;               

                $grouptype->status = 'Active';
                $grouptype->save();
                $group_id = $grouptype->id;

                foreach ($this->lang_locales as $locale) {
                    $grouptypeDetails = new GroupTypeTranslation;
                    $grouptypeDetails->group_type_id = $grouptype->id;
                    $grouptypeDetails->locale = $locale->code;
                    $grouptypeDetails->name = $groupName;
                    $grouptypeDetails->save();
                }
                
                
            }
        }

    }

    public function saveDesignation()
    {
    	$response = Curl::to('http://api.dev.tawasul.shurooq.gov.ae/api/designations')
                        ->withData( array( 'key' => 'ADF767DGH' ) )
                        ->asJson()
                         ->get();
    

        foreach ($response as $key => $res) {
        	$designationName  = $res->Designation;
        
        	$designationDetails = DesignationTranslation::where('name', $designationName )->get();

            if($designationDetails->count() == 0)
            {
                $designation        = new Designation;
                

                $designation->status = 'Active';
                $designation->save();
                $designation_id = $designation->id;

                foreach ($this->lang_locales as $locale) {
                    $designationDetails = new DesignationTranslation;
                    $designationDetails->designation_id = $designation->id;
                    $designationDetails->locale = $locale->code;
                    $designationDetails->name = $designationName;
                    $designationDetails->save();
                }
                                
            }
        }

    }

    public function saveUser()
    {
    	$response = Curl::to('http://api.dev.tawasul.shurooq.gov.ae/api/allusers')
                        ->withData( array( 'key' => 'ADF767DGH' ) )
                        ->asJson()
                         ->get();
                     
        foreach ($response as $key => $res) {

    		$companyName     = $res->userCompany;
            $departmentName  = $res->userDepartment;
            $groupName       = $res->userGroup;
            $userEmail       = $res->userEmail;
            $display_name    = $res->displayName; 
            $userTitle       = $res->userTitle;   


            $CompanyDetails = CompanyTranslation::where('name', $companyName )->get();
          
            if($CompanyDetails->count() == 0)
            {
                $company        = new Company;
                


                $company->status = 'Active';
                $company->save();
                $company_id = $company->id;

                foreach ($this->lang_locales as $locale) {
                    $CompanyDetails = new CompanyTranslation;
                    $CompanyDetails->company_id = $company->id;
                    $CompanyDetails->locale = $locale->code;
                    $CompanyDetails->name = $companyName;
                    $CompanyDetails->save();
                }
                
                
            }
            else
            {
                $company_id = $CompanyDetails[0]->company_id;
            }
           

            $departmentDetails = DepartmentTranslation::where('name', $departmentName )->get();

            if($departmentDetails->count() == 0)
            {
                $department        = new Department;
                

                $department->status = 'Active';
                $department->save();
                $department_id = $department->id;

                foreach ($this->lang_locales as $locale) {
                    $departmentDetails = new DepartmentTranslation;
                    $departmentDetails->department_id = $department->id;
                    $departmentDetails->locale = $locale->code;
                    $departmentDetails->name = $departmentName;
                    $departmentDetails->save();
                }
                                
            }
            else
            {
                $department_id = $departmentDetails[0]->department_id;
            }


            $grouptypeDetails = GroupTypeTranslation::where('name', $groupName )->get();

            if($grouptypeDetails->count() == 0)
            {
               
                $grouptype        = new GroupType;               

                $grouptype->status = 'Active';
                $grouptype->save();
                $group_id = $grouptype->id;

                foreach ($this->lang_locales as $locale) {
                    $grouptypeDetails = new GroupTypeTranslation;
                    $grouptypeDetails->group_type_id = $grouptype->id;
                    $grouptypeDetails->locale = $locale->code;
                    $grouptypeDetails->name = $groupName;
                    $grouptypeDetails->save();
                }
                
                
            }
            else
            {
                
                $group_id = $grouptypeDetails[0]->group_type_id;
            }
            

            $expEmail = explode('@',$userEmail);
            $username = $expEmail[0];
            $userDetails = User::where('ad_username', $username )->get();
 			
 			//dd($userDetails);
            if($userDetails->count() == 0)
            {
	            $user = new User;
	            $user->ad_username = $username; 
	            $user->title       = $userTitle;
	            $user->email       = $userEmail;
	            //$user->password    = bcrypt($password);
	            $user->display_name = $display_name;
	            $user->group_id    = $group_id;
	            $user->company_id  = $company_id;
	            $user->department_id = $department_id;
	            $user->access_token  = \Hash::make(time());

	            $user->save();
        	}
        }
    }

    /////////////******************* Insert data from Api *******************************////////////

}
